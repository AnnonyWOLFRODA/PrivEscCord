"""
Critical security checks cog for PrivEscCord.
Contains commands for detecting severe security vulnerabilities.
"""

import discord
import asyncio
from discord.ext import commands
from datetime import datetime, timezone

class CriticalsChecks(commands.Cog):
    """Critical security checks for Discord guild vulnerabilities."""

    def __init__(self, bot):
        self.bot = bot
        self._role_cache = {}
     
    async def get_roles_with_perms(self, guild, permissions):
        """Cache et optimise les requ√™tes de r√¥les"""
        cache_key = f"{guild.id}_{hash(tuple(permissions))}"
        if cache_key not in self._role_cache:
            roles = [role for role in guild.roles 
                    if any(getattr(role.permissions, perm) for perm in permissions)]
            self._role_cache[cache_key] = roles
        return self._role_cache[cache_key]   
        
    @commands.hybrid_command(
        name="role_hierarchy_check",
        brief="V√©rifie la hi√©rarchie des r√¥les pour d√©tecter les probl√®mes critiques",
        description="D√©tecte si des r√¥les d√©coratifs sont plac√©s au-dessus de r√¥les avec des permissions importantes"
    )
    @commands.has_permissions(administrator=True)
    async def role_hierarchy_check(self, ctx):
        """V√©rifie la hi√©rarchie des r√¥les pour d√©tecter les probl√®mes de s√©curit√©."""
        guild = ctx.guild
        issues = []
        
        # Get roles with dangerous permissions
        dangerous_perms = [
            'administrator', 'ban_members', 'kick_members', 'manage_guild', 
            'manage_roles', 'manage_channels', 'manage_webhooks'
        ]
        
        roles_with_perms = []
        for role in guild.roles:
            if role.name == "@everyone":
                continue
            role_perms = [perm for perm, value in role.permissions if value and perm in dangerous_perms]
            if role_perms:
                roles_with_perms.append((role, role_perms))
        
        # Check for decorative roles above permission roles
        for role, perms in roles_with_perms:
            higher_roles = [r for r in guild.roles if r.position > role.position and not any(getattr(r.permissions, perm) for perm in dangerous_perms)]
            if higher_roles:
                for higher_role in higher_roles:
                    issues.append(f"‚ö†Ô∏è R√¥le d√©coratif `{higher_role.name}` (pos: {higher_role.position}) au-dessus du r√¥le avec permissions `{role.name}` (pos: {role.position}, perms: {', '.join(perms)})")
        
        embed = discord.Embed(
            title="üîç V√©rification de la hi√©rarchie des r√¥les",
            color=discord.Color.red() if issues else discord.Color.green(),
            timestamp=datetime.now(timezone.utc)
        )
        
        if issues:
            embed.description = f"**{len(issues)} probl√®me(s) d√©tect√©(s) :**\n" + "\n".join(issues[:10])
            if len(issues) > 10:
                embed.add_field(name="Note", value=f"... et {len(issues) - 10} autres probl√®mes", inline=False)
        else:
            embed.description = "‚úÖ Aucun probl√®me de hi√©rarchie d√©tect√©"
        
        await ctx.send(embed=embed)

    @commands.hybrid_command(
        name="admin_leak_check",
        brief="D√©tecte les fuites de permissions administrateur",
        description="V√©rifie si des r√¥les ont la permission Administrator sans surveillance appropri√©e"
    )
    @commands.has_permissions(administrator=True)
    async def admin_leak_check(self, ctx):
        """D√©tecte les r√¥les avec permissions administrateur potentiellement dangereuses."""
        guild = ctx.guild
        admin_roles = []
        
        for role in guild.roles:
            if role.permissions.administrator and role.name != "@everyone":
                # Check if it's a decorative role (no other meaningful permissions)
                other_perms = [perm for perm, value in role.permissions if value and perm != 'administrator']
                admin_roles.append({
                    'role': role,
                    'members': len(role.members),
                    'other_perms': len(other_perms),
                    'position': role.position
                })
        
        embed = discord.Embed(
            title="üõ°Ô∏è V√©rification des permissions Administrator",
            color=discord.Color.red() if admin_roles else discord.Color.green(),
            timestamp=datetime.now(timezone.utc)
        )
        
        if admin_roles:
            description = f"**{len(admin_roles)} r√¥le(s) avec Administrator d√©tect√©(s) :**\n"
            for role_info in admin_roles:
                role = role_info['role']
                risk_level = "üî¥" if role_info['members'] > 5 else "üü°"
                description += f"{risk_level} `{role.name}` - {role_info['members']} membre(s), position {role_info['position']}\n"
            embed.description = description
            
            # Add warning for high-risk roles
            high_risk = [r for r in admin_roles if r['members'] > 5]
            if high_risk:
                embed.add_field(
                    name="‚ö†Ô∏è R√¥les √† risque √©lev√©", 
                    value=f"{len(high_risk)} r√¥le(s) avec beaucoup de membres.",
                    inline=False
                )
        else:
            embed.description = "‚úÖ Aucun r√¥le avec permission Administrator d√©tect√©"
        
        await ctx.send(embed=embed)

    @commands.hybrid_command(
        name="dangerous_perm_check",
        brief="Liste tous les r√¥les avec des permissions dangereuses",
        description="Scanne tous les r√¥les pour d√©tecter les permissions critiques"
    )
    @commands.has_permissions(administrator=True)
    async def dangerous_perm_check(self, ctx):
        """Analyse tous les r√¥les pour d√©tecter les permissions dangereuses."""
        guild = ctx.guild
        dangerous_perms = {
            'administrator': 'üëë Administrator',
            'manage_guild': '‚öôÔ∏è Manage Guild',
            'manage_roles': 'üé≠ Manage Roles',
            'manage_channels': 'üìÅ Manage Channels',
            'manage_webhooks': 'üîó Manage Webhooks',
            'ban_members': 'üî® Ban Members',
            'kick_members': 'üë¢ Kick Members',
            'manage_messages': 'üìù Manage Messages'
        }
        
        dangerous_roles = []
        for role in guild.roles:
            if role.name == "@everyone":
                continue
            
            role_dangerous_perms = []
            for perm, display_name in dangerous_perms.items():
                if getattr(role.permissions, perm):
                    role_dangerous_perms.append(display_name)
            
            if role_dangerous_perms:
                dangerous_roles.append({
                    'role': role,
                    'perms': role_dangerous_perms,
                    'members': len(role.members)
                })
        
        embed = discord.Embed(
            title="‚ö†Ô∏è R√¥les avec permissions dangereuses",
            color=discord.Color.orange(),
            timestamp=datetime.now(timezone.utc)
        )
        
        if dangerous_roles:
            # Sort by number of dangerous permissions
            dangerous_roles.sort(key=lambda x: len(x['perms']), reverse=True)
            
            description = f"**{len(dangerous_roles)} r√¥le(s) avec permissions critiques :**\n\n"
            for role_info in dangerous_roles[:15]:  # Limit to 15 roles
                role = role_info['role']
                perms_list = ', '.join(role_info['perms'][:3])  # Show first 3 perms
                if len(role_info['perms']) > 3:
                    perms_list += f" (+{len(role_info['perms']) - 3} autres)"
                
                description += f"**{role.name}** ({role_info['members']} membres)\n{perms_list}\n\n"
            
            if len(dangerous_roles) > 15:
                description += f"... et {len(dangerous_roles) - 15} autres r√¥les"
                
            embed.description = description
        else:
            embed.description = "‚úÖ Aucun r√¥le avec permissions dangereuses d√©tect√©"
        
        await ctx.send(embed=embed)

    @commands.hybrid_command(
        name="everyone_perm_check",
        brief="V√©rifie les permissions du r√¥le @everyone",
        description="Analyse les permissions du r√¥le @everyone dans tous les salons"
    )
    @commands.has_permissions(administrator=True)
    async def everyone_perm_check(self, ctx):
        """V√©rifie les permissions dangereuses du r√¥le @everyone."""
        guild = ctx.guild
        everyone_role = guild.default_role
        issues = []
        
        # Check guild-level permissions
        dangerous_guild_perms = [
            'administrator', 'ban_members', 'kick_members', 'manage_guild',
            'manage_roles', 'manage_channels', 'manage_webhooks'
        ]
        
        guild_issues = []
        for perm in dangerous_guild_perms:
            if getattr(everyone_role.permissions, perm):
                guild_issues.append(f"üî¥ {perm}")
        
        if guild_issues:
            issues.append(f"**Permissions globales dangereuses :** {', '.join(guild_issues)}")
        
        # Check channel-level permissions
        problematic_channels = []
        for channel in guild.channels:
            if isinstance(channel, (discord.TextChannel, discord.VoiceChannel)):
                overwrites = channel.overwrites_for(everyone_role)
                channel_issues = []
                
                if isinstance(channel, discord.TextChannel):
                    if overwrites.send_messages and overwrites.mention_everyone:
                        channel_issues.append("mention_everyone + send_messages")
                    if overwrites.manage_messages:
                        channel_issues.append("manage_messages")
                    if overwrites.manage_webhooks:
                        channel_issues.append("manage_webhooks")
                
                if overwrites.manage_channels:
                    channel_issues.append("manage_channels")
                
                if channel_issues:
                    problematic_channels.append(f"#{channel.name}: {', '.join(channel_issues)}")
        
        embed = discord.Embed(
            title="üë• V√©rification des permissions @everyone",
            color=discord.Color.red() if (guild_issues or problematic_channels) else discord.Color.green(),
            timestamp=datetime.now(timezone.utc)
        )
        
        if issues or problematic_channels:
            description = ""
            if issues:
                description += "\n".join(issues) + "\n\n"
            
            if problematic_channels:
                description += f"**Salons avec permissions dangereuses ({len(problematic_channels)}) :**\n"
                description += "\n".join(problematic_channels[:10])
                if len(problematic_channels) > 10:
                    description += f"\n... et {len(problematic_channels) - 10} autres salons"
            
            embed.description = description
        else:
            embed.description = "‚úÖ Aucune permission dangereuse d√©tect√©e pour @everyone"
        
        await ctx.send(embed=embed)

    @commands.hybrid_command(
        name="unprotected_webhooks",
        brief="V√©rifie les salons vuln√©rables aux abus de webhooks",
        description="D√©tecte les salons o√π les webhooks peuvent √™tre abus√©s"
    )
    @commands.has_permissions(administrator=True)
    async def unprotected_webhooks(self, ctx):
        """V√©rifie les vuln√©rabilit√©s li√©es aux webhooks."""
        guild = ctx.guild
        vulnerable_channels = []
        
        for channel in guild.text_channels:
            # Check roles that can both manage webhooks and send messages
            vulnerable_roles = []
            
            for role in guild.roles:
                if role.name == "@everyone":
                    overwrites = channel.overwrites_for(role)
                    if (overwrites.manage_webhooks or role.permissions.manage_webhooks) and \
                       (overwrites.send_messages or role.permissions.send_messages):
                        vulnerable_roles.append(role.name)
                else:
                    # Check if role has both permissions
                    overwrites = channel.overwrites_for(role)
                    has_webhook_perm = overwrites.manage_webhooks or role.permissions.manage_webhooks
                    has_send_perm = overwrites.send_messages or role.permissions.send_messages
                    
                    if has_webhook_perm and has_send_perm and len(role.members) > 0:
                        vulnerable_roles.append(f"{role.name} ({len(role.members)} membres)")
            
            if vulnerable_roles:
                # Check existing webhooks
                try:
                    webhooks = await channel.webhooks()
                    webhook_count = len(webhooks)
                except:
                    webhook_count = "Erreur"
                
                vulnerable_channels.append({
                    'channel': channel,
                    'roles': vulnerable_roles,
                    'webhook_count': webhook_count
                })
        
        embed = discord.Embed(
            title="üîó V√©rification des vuln√©rabilit√©s webhook",
            color=discord.Color.red() if vulnerable_channels else discord.Color.green(),
            timestamp=datetime.now(timezone.utc)
        )
        
        if vulnerable_channels:
            description = f"**{len(vulnerable_channels)} salon(s) vuln√©rable(s) d√©tect√©(s) :**\n\n"
            
            for channel_info in vulnerable_channels[:10]:
                channel = channel_info['channel']
                roles = channel_info['roles']
                webhook_count = channel_info['webhook_count']
                
                risk_level = "üî¥" if len(roles) > 3 or "@everyone" in str(roles) else "üü°"
                description += f"{risk_level} **#{channel.name}** ({webhook_count} webhooks)\n"
                description += f"R√¥les √† risque: {', '.join(roles[:3])}"
                if len(roles) > 3:
                    description += f" (+{len(roles) - 3} autres)"
                description += "\n\n"
            
            if len(vulnerable_channels) > 10:
                description += f"... et {len(vulnerable_channels) - 10} autres salons"
            
            embed.description = description
        else:
            embed.description = "‚úÖ Aucune vuln√©rabilit√© webhook d√©tect√©e"
        
        await ctx.send(embed=embed)

    @commands.hybrid_command(
        name="server_settings_check",
        brief="V√©rifie les param√®tres de s√©curit√© du serveur",
        description="Analyse les param√®tres de s√©curit√© globaux du serveur (2FA, niveau de v√©rification, etc.)"
    )
    @commands.has_permissions(administrator=True)
    async def server_settings_check(self, ctx):
        """V√©rifie les param√®tres de s√©curit√© critiques du serveur."""
        guild = ctx.guild
        security_issues = []
        security_good = []
        
        # Check MFA requirement for moderation actions
        if guild.mfa_level == discord.MFALevel.disabled:
            security_issues.append("üî¥ **2FA d√©sactiv√©** - Les mod√©rateurs n'ont pas besoin de 2FA")
        else:
            security_good.append("‚úÖ **2FA activ√©** - 2FA requis pour les actions de mod√©ration")
        
        # Check verification level
        verification_levels = {
            discord.VerificationLevel.none: ("üî¥ **Aucune v√©rification**", "Aucune restriction sur les nouveaux membres"),
            discord.VerificationLevel.low: ("üü° **V√©rification faible**", "Email v√©rifi√© requis"),
            discord.VerificationLevel.medium: ("üü° **V√©rification moyenne**", "Inscription Discord > 5 minutes"),
            discord.VerificationLevel.high: ("üü¢ **V√©rification √©lev√©e**", "Membre du serveur > 10 minutes"),
            discord.VerificationLevel.highest: ("üü¢ **V√©rification maximale**", "Num√©ro de t√©l√©phone v√©rifi√© requis")
        }
        
        level_info = verification_levels.get(guild.verification_level)
        if level_info:
            if guild.verification_level in [discord.VerificationLevel.none, discord.VerificationLevel.low]:
                security_issues.append(f"{level_info[0]} - {level_info[1]}")
            else:
                security_good.append(f"{level_info[0]} - {level_info[1]}")
        
        # Check explicit content filter
        content_filter_levels = {
            discord.ContentFilter.disabled: ("üî¥ **Filtre de contenu d√©sactiv√©**", "Aucun scan des images/vid√©os"),
            discord.ContentFilter.no_role: ("üü° **Filtre partiel**", "Scan seulement pour les membres sans r√¥le"),
            discord.ContentFilter.all_members: ("üü¢ **Filtre complet**", "Scan pour tous les membres")
        }
        
        filter_info = content_filter_levels.get(guild.explicit_content_filter)
        if filter_info:
            if guild.explicit_content_filter == discord.ContentFilter.disabled:
                security_issues.append(f"{filter_info[0]} - {filter_info[1]}")
            elif guild.explicit_content_filter == discord.ContentFilter.no_role:
                security_issues.append(f"{filter_info[0]} - {filter_info[1]}")
            else:
                security_good.append(f"{filter_info[0]} - {filter_info[1]}")
        
        # Check default notifications
        if guild.default_notifications == discord.NotificationLevel.all_messages:
            security_issues.append("üü° **Notifications par d√©faut** - Tous les messages (peut √™tre spam)")
        else:
            security_good.append("‚úÖ **Notifications** - Seulement mentions (recommand√©)")
        
        # Check NSFW level (if available)
        if hasattr(guild, 'nsfw_level'):
            if guild.nsfw_level == discord.NSFWLevel.explicit:
                security_issues.append("üî¥ **Serveur NSFW explicite** - Contenu pour adultes")
            elif guild.nsfw_level == discord.NSFWLevel.safe:
                security_good.append("‚úÖ **Serveur s√ªr** - Pas de contenu NSFW")
        
        # Check if server has community features enabled
        if "COMMUNITY" in guild.features:
            security_good.append("‚úÖ **Serveur communautaire** - Fonctionnalit√©s de mod√©ration avanc√©es")
            
            # Check if server has moderation features
            if "AUTO_MODERATION" in guild.features:
                security_good.append("‚úÖ **AutoMod activ√©** - Mod√©ration automatique disponible")
        else:
            security_issues.append("üü° **Pas de fonctionnalit√©s communautaires** - Mod√©ration limit√©e")
        
        # Check server features for security-related ones
        security_features = []
        if "VERIFIED" in guild.features:
            security_features.append("‚úÖ Serveur v√©rifi√©")
        if "PARTNERED" in guild.features:
            security_features.append("‚úÖ Serveur partenaire")
        if "AUTO_MODERATION" in guild.features:
            security_features.append("‚úÖ AutoMod√©ration")
        if "RAID_ALERTS_DISABLED" in guild.features:
            security_issues.append("üî¥ **Alertes de raid d√©sactiv√©es**")
        
        # Check server size vs verification level (risk assessment)
        member_count = guild.member_count
        if member_count > 1000 and guild.verification_level in [discord.VerificationLevel.none, discord.VerificationLevel.low]:
            security_issues.append(f"üî¥ **Serveur large ({member_count} membres) avec v√©rification faible** - Risque de raid √©lev√©")
        elif member_count > 100 and guild.verification_level == discord.VerificationLevel.none:
            security_issues.append(f"üü° **Serveur moyen ({member_count} membres) sans v√©rification** - Vuln√©rable aux raids")
        
        # Create embed
        embed = discord.Embed(
            title="üõ°Ô∏è V√©rification des param√®tres de s√©curit√©",
            color=discord.Color.red() if security_issues else discord.Color.green(),
            timestamp=datetime.now(timezone.utc)
        )
        
        # Add server info
        embed.add_field(
            name="üìä Informations du serveur",
            value=f"**Nom:** {guild.name}\n**Membres:** {member_count}\n**Cr√©√©:** <t:{int(guild.created_at.timestamp())}:R>",
            inline=False
        )
        
        # Add security issues
        if security_issues:
            issues_text = "\n".join(security_issues[:10])
            if len(security_issues) > 10:
                issues_text += f"\n... et {len(security_issues) - 10} autres probl√®mes"
            embed.add_field(
                name=f"‚ö†Ô∏è Probl√®mes de s√©curit√© ({len(security_issues)})",
                value=issues_text,
                inline=False
            )
        
        # Add good security practices
        if security_good:
            good_text = "\n".join(security_good[:8])
            if len(security_good) > 8:
                good_text += f"\n... et {len(security_good) - 8} autres"
            embed.add_field(
                name=f"‚úÖ Bonnes pratiques ({len(security_good)})",
                value=good_text,
                inline=False
            )
        
        # Add special features if any
        if security_features:
            embed.add_field(
                name="üåü Fonctionnalit√©s de s√©curit√©",
                value="\n".join(security_features),
                inline=False
            )
        
        # Add risk assessment
        risk_score = len(security_issues)
        if risk_score == 0:
            risk_text = "üü¢ **Faible** - Configuration s√©curis√©e"
        elif risk_score <= 2:
            risk_text = "üü° **Moyen** - Quelques am√©liorations recommand√©es"
        elif risk_score <= 4:
            risk_text = "üü† **√âlev√©** - Plusieurs probl√®mes √† corriger"
        else:
            risk_text = "üî¥ **Critique** - Configuration dangereuse"
        
        embed.add_field(
            name="üìà Niveau de risque",
            value=risk_text,
            inline=False
        )
        
        await ctx.send(embed=embed)
        
    async def execute_checks(self, ctx):
        """Execute all critical checks."""
        tasks = [
            self.role_hierarchy_check(ctx),
            self.admin_leak_check(ctx),
            self.dangerous_perm_check(ctx),
            self.everyone_perm_check(ctx),
            self.unprotected_webhooks(ctx),
            self.server_settings_check(ctx)
        ]
        return asyncio.gather(*tasks)

async def setup(bot):
    """Setup function for the cog."""
    await bot.add_cog(CriticalsChecks(bot))